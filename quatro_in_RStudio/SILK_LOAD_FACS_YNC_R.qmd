
---
title: "Modeling turnover rates"
format:
  html:
    code-fold: true
execute:
  echo: false
---

A real-world example of table generation with the correct number of significant digits, suppressing p-values < 0.0001, and grouping mean and standard error.  Datafile '42003_2022_3037_MOESM5_ESM.csv' must be in working directory.

```{r}
library(readr)
library(dplyr)
#library(Hmisc)
library(tidyverse)
library(ggpubr)
library(emmeans)
library("lsmeans")
library("multcompView")
library("multcomp")
library(flextable)
library(tableone)

pvalue_sigfig <- function(mean_value,sigdig){
  print(mean_value)
  mean_value_pub = array("numeric",length(mean_value))
  entries <- length(mean_value)
  
  print(entries)
  nsmall = integer(length = entries)
  
  

    
    exponent_sn_me <- log10(abs(as.numeric(mean_value)))
    print(exponent_sn_me)
    exponent <- sigdig - ceiling(exponent_sn_me)
    significand_se <- ceiling(exponent_sn_me) - exponent_sn_me
    print(exponent)
    print(significand_se)
    for (it in 1:entries){
    
      if (significand_se[it] < 0.022276) {
        exponent[it] <- exponent[it] - 1
      }
      if (exponent[it] < 1){
        nsmall[it] = 0
      }
      else{
        nsmall[it] = exponent[it]
      }
      mean_value_pub[it] <- formatC(round(as.numeric(mean_value[it]),digits = exponent[it]),format = 'f', digits = nsmall[it])
      if (exponent[it] > 4){

        mean_value_pub[it] <- "<0.0001"

      }
    }
    print(exponent)
    print(mean_value_pub)
    
  print(mean_value_pub)
}

mean_pub_format_se_log_simple <- function(mean_value,se_value,n_value, sigdig, big.mark = ",", decimal.mark = "."){
  mean_value_pub = array("numeric",dim(mean_value))
  se_value_pub = array("numeric",dim(se_value))
  an_mean_se_pub = array("character",dim(mean_value))
  entries <- length(mean_value[,1])
  groups <- length(mean_value[1,])
  
  print(entries)
  print(groups)
  nsmall = integer(length = groups)
 
  for (it in 1:entries) {
    print(se_value[it,])
    exponent_sn_se <- log10(abs(as.numeric(se_value[it,])))
    print(exponent_sn_se)
    exponent <- sigdig - ceiling(exponent_sn_se)
    significand_se <- ceiling(exponent_sn_se) - exponent_sn_se
    print(exponent)
    print(significand_se)

    
    se_value_pub[it,] <- round(as.numeric(se_value[it,]),digits = exponent)
    print(se_value_pub[it,])
     for (jt in 1:groups){
      if (significand_se[jt] < 0.022276) {
        exponent[jt] <- exponent[jt] - 1
      }
      if (exponent[jt] < 1){
        nsmall[jt] = 0
      }
      else{
        nsmall[jt] = exponent[jt]
      }
    }
    print(exponent)
  
    
    print(mean_value[it,])
    
    for (jt in 1:groups){
      mean_value_pub[it,jt] <- formatC(round(as.numeric(mean_value[it,jt]),digits = exponent[jt]),format = 'f', digits = nsmall[jt])
    }
    print(mean_value_pub[it,])
            
  }
  print(mean_value_pub)
  print(se_value_pub)
  for (it in 1:length(mean_value[1,])){
    print(it)
    an_mean_se_pub[,it] <- paste0(mean_value_pub[,it], " (",se_value_pub[,it],")")
  }
  an_mean_se_pub
}



SILKjulia_011421 <- read_csv("42003_2022_3037_MOESM5_ESM.csv")
SILKjulia_011421 <- filter(SILKjulia_011421,mutation_status == 0)
names(SILKjulia_011421)<- make.names(names(SILKjulia_011421), unique=TRUE) 
names(SILKjulia_011421)
SILKjulia_011421 <- transform(SILKjulia_011421, TotalGrayVol_mL = TotalGrayVol/1000)
SILKjulia_011421 <- transform(SILKjulia_011421, kgamma42 = kgamma42/1000)
variable <- c("PRR.42.38","kgamma42","kf","TotalGrayVol_mL")
SILKjulia_011421an <- filter(SILKjulia_011421,AmyloidStatus == 0)
SILKjulia_011421ap <- filter(SILKjulia_011421,AmyloidStatus == 1)

groupnum <- 2
emmeans_p = NULL
Group_mean = array("numeric",dim=(c(length(variable),groupnum)))
Group_n = array("integer",dim=(c(length(variable),groupnum)))
Group_mean_pub = array("character",dim=(c(length(variable),groupnum)))
Group_se = array("numeric",dim=(c(length(variable),groupnum)))
Group_cor = NULL
cor_an_p = NULL
cor_ap_p = NULL
pvalue = NULL
cor_an = NULL
cor_ap = NULL

mean_sigdig = 1
cor_sigdig = 2
p_sigdig = 2

for (it in 1:length(variable)) {
  print(it)
  model <- lm(eval(as.name(variable[it])) ~ Group_2*Age,data=SILKjulia_011421)

  
  pwc <- 
    emmeans(
      model, pairwise ~ Group_2*Age, 
      adjust="tukey"
    )
  pwc
  pwc_emm <- summary(pwc$emmeans,calc = c(n = ".wgt."))
   pwc_em <- transform(pwc$contrasts)
  pwc_em$p.value
  print(summary(pwc,calc = c(n = ".wgt.")))
  groups = pwc$contrasts@misc$famSize
  
    Group_n[it,] <- pwc_emm$n
    Group_se[it,] <- pwc_emm$SE
    Group_mean[it,] <- pwc_emm$emmean
  
  pvalue[it] <- pwc_em$p.value
    col_num <- which(colnames(SILKjulia_011421) == as.name(variable[it]))

  cor_an[it] <- cor.test(SILKjulia_011421an[[col_num]],SILKjulia_011421an$Age,method = "pearson")$estimate
  cor_an_p[it] <-  cor.test(SILKjulia_011421an[[col_num]],SILKjulia_011421an$Age,method = "pearson")$p.value
  cor_ap[it] <- cor.test(SILKjulia_011421ap[[col_num]],SILKjulia_011421ap$Age,method = "pearson")$estimate
  cor_ap_p[it] <-  cor.test(SILKjulia_011421ap[[col_num]],SILKjulia_011421ap$Age,method = "pearson")$p.value
  
}
pvalue
cor_an_p
pvalue_pub <- pvalue_sigfig(pvalue,p_sigdig)
cor_an_pub <- pvalue_sigfig(cor_an,cor_sigdig)
cor_an_p_pub <- pvalue_sigfig(cor_an_p,p_sigdig)
cor_ap_pub <- pvalue_sigfig(cor_ap,cor_sigdig)
cor_ap_p_pub <- pvalue_sigfig(cor_ap_p,p_sigdig)

print(Group_mean_pub <- mean_pub_format_se_log_simple(Group_mean, Group_se, Group_n, mean_sigdig))

df = data.frame(variable,Group_mean_pub,pvalue_pub,cor_an_pub,cor_an_p_pub,cor_ap_pub,cor_ap_p_pub)
df_ft <- flextable(df)
df_ft <- set_header_labels(df_ft, pvalue_pub = "p-value^1",
                           cor_an_pub = "Amyloid negative (N = 58)", cor_an_p_pub = "p-value",
                           cor_ap_pub = "Amyloid positive (N = 38)", cor_ap_p_pub = "p-value" )
df_ft <-  add_header_row(df_ft,
                              colwidths = c(1,3,4),
                              values = c("","Predicted marginal means (S.E.) at age = 69.9 y", "Correlation coefficient with age")
)
df_ft <- theme_box(df_ft)
df_ft

print(Group_mean_pub <- mean_pub_format_se_log_simple(Group_mean, Group_se, Group_n, mean_sigdig))

```

